@document.meta
  title: nvim
  description: miscellaneous stuff related to nvim plugins/config
  authors: harry
  categories: nvim lua fennel
  created: 2022-03-31
  version: 0.0.11
@end

* nvim-cmp
  {~/.config/nvim/fnl/dotfiles/module/completion.fnl}[nvim-cmp config]

** <tab> word detection
   this version of `has-word-before?` allows for words ending with ?\/!\/>\/etc
   (valid fennel symbols) although there probably isn't anything to complete at
   the point you've typed what is probably the entire symbol

@code fennel
(fn has-word-before? []
  (let [[line col] (win-get-cursor 0)
        [s] (buf-get-lines 0 (- line 1) line true)]
    (and (~= col 0)
         (-> s
             (s/sub 1 col)
             (s/match "%w[%w%!%*%?%_%-%>%<]*$")
             (not= nil)))))
@end

* ts-custom-locals

** find-usages
  updated version of `find-usages` for fennel 1.1.0,
  won't work until aniseed updates fennel

@code fennel

(fn find-usages [node scope-node bufnr]
  (let [bufnr (or bufnr (api.nvim_get_current_buf))
        text (get-text node bufnr)
        scope (when (and text (< 1 (length text)))
                (or scope-node (get-root node)))]
    (if (= nil scope) []
        (icollect [qmatch (iter-locals bufnr scope)]
          (match-try (?. qmatch :reference :node)
            ref (and ref (= text (get-text ref bufnr)))
            true (find-definition ref bufnr)
            (def-node _ kind) (or (= nil kind) (= node def-node))
            true ref
            (catch _ nil))))))

(fn find-usages [node scope-node bufnr]
  (let [bufnr (or bufnr (api.nvim_get_current_buf))
        text (get-text node bufnr)
        scope (when (and text (< 1 (length text)))
                (or scope-node (get-root node)))]
    (if (= nil scope) []
        (icollect [$local (iter-locals bufnr scope)]
          (match-try
            (?. $local :reference :node)
            (where $ref (= text (get-text $ref bufnr)))
            (find-definition $ref bufnr)
            (where (or (_ _ nil) (node _ _)))
            $ref)))))

; (where ($def _ $kind) (or (= nil $kind) (= node $def)))

@end

* general iteration

** it-seek(?)
   TODO: write a macro for a general form of this? like a verion of `each` that
   merges behavior with `let` and executes a "final" body after iteration is
   finished, with iteration bindings and derived bindings still in scope (like
   `scope` and `entry` here)

@code fennel

(fn find-definition [node bufnr]
  (let [defs (get-definition-table bufnr)
        text (get-text node bufnr)]
    (var (scope entry) (values nil nil))
    (each [v (iter-scope-tree node bufnr) :until (not= nil entry)]
      (set (scope entry) (values v (. defs (get-definition-id scope text)))))
    (if (not= nil entry)
        (values entry.node scope entry.kind)
        (values node (get-root node) nil))))

@end

   this actually compiles to really clean lua, aside from the lack of an
   early-return. i think the only redundancy is an extra iteration to check
   `(nil ~= entry)` before breaking, and then another `(nil ~= entry)` test to
   determine the return value. in this case that's fine because a `nil` test is
   cheap, but with a complex condition or iteration i guess guess it would be
   worth optimizing

   it's interesting to note that the fennel compiler evaluates `:until` /after/
   each iteration, rather than at the end of the body. that makes it not quite
   ideal for replacing early-return style code.

   that also means in order to replace an early-return with a macro it would
   require use of `(lua ...)`. although it would probably be better to use
   `(lua :break)` at the /end/ of the body so that `it-seek` (or whatever this
   theoretical macro is called) will evaluate to a value and wouldn't be
   limited to handling the return value of an entire function

@code lua

local function find_definition(node, bufnr)
  local defs = get_definitions_lookup_table(bufnr)
  local text = get_text(node, bufnr)
  local scope, entry = nil, nil
  for v in iter_scope_tree(node, bufnr) do
    if (nil ~= entry) then break end
    scope, entry = v, defs[get_definition_id(scope, text)]
  end
  if (nil ~= entry) then
    return entry.node, scope, entry.kind
  else
    return node, get_root(node), nil
  end
end

@end

   this is the aforementioned generalized version. I still need to figure out
   how each piece of this is going to fit together
   - is `:until` always going to be the return condition?
   - is there a case where there is an `:until` but no return condition? i.e.
     the return value is always the same
   - what are the differences between this and `it-select`? can they be merged
     into one macro?
   - is `(lua :break)` a reasonable solution to this? it would seem that it is.
     using manual lua emission in a /macro/ allows us to control placement and
     content
   - is `(lua :return)` a reasonable solution, even in a macro? creating a second
     macro called `it-seek!` seems kind of reasonable. `return` isn't exactly a
     side-effect but the `!` does signify that more is going on
   -- `it-seek!`
   -- `it-seek?!`
   -- `it-seek!?`
   -- `it-seek??`
   -- using form #3 (below)
      `(it-seek [k v (pairs tbl) :let ... :until ... :return true])`
   -- using the other forms, allow `:return` before the body
      `(it-seek [k v (pairs tbl)] []? :return (body...))`
   - the `(lua :return)` version is slightly more efficient because it doesn't
     require an additional check of `cond` at the end, so it should be
     implemented. using the `:break` version just to return its value would be
     doing more work than necessary on the lua side.


| it-seek-code
@code fennel

(fn it-seek [iter-tbl bind-tbl body]
  "seek a value (and derived values) from an iterator. `body` is
   evaluated *after* the iterator is finished, but with bindings in tact
   so that a default value can be returned if the seek was unsuccessful")

;; #1 (don't like this one)
(it-seek [scope (iter-scope-tree node bufnr) :until (not= nil entry)]
         [entry (. defs (get-definition-id scope text))]
  (if (not= nil entry)) ;; `(not= nil entry)` is the :until, is it always?
    (values entry.node scope entry.kind)
    (values node (get-root node) nil))

;; this version uses :until/_ in the body instead of :until in the
;; iterator arguments because having it placed before the derived
;; bindings is slightly counter-intuitive
;; #2
(it-seek [scope (iter-scope-tree node bufnr)]
         [entry (. defs (get-definition-id scope text))]
  (:until (not= nil entry)
    (values entry.node scope entry.kind))
  (_ (values node (get-root node) nil)))

;; this version puts the derived bindings and :until in the iterator
;; arguments so things are ordered more logically than form #1
;; #3
(it-seek [scope (iter-scope-tree node bufnr)
          :let [entry (. defs (get-definition-id scope text))]
          :until (not= nil entry)]
  (values entry.node scope entry.kind)
  (values node (get-root node) nil))

;; this form is slightly like `match` except instead of bind-cond/value
;; it just uses cond/value. i think i like this one the most
;; #4
(it-seek [scope (iter-scope-tree node bufnr)]
         [entry (. defs (get-definition-id scope text))]
  ((not= nil entry) (values entry.node scope entry.kind)
   (>= thing entry) (values thing.node scope thing.kind)
   _ (values node (get-root node) nil)))

(do
  (var cond nil)
  (var scope nil)
  (var entry nil)
  (each [scope* (iter-scope-tree node bufnr)]
    (set scope scope*)
    (set entry (. defs (get-definition-id scope text)))
    (if (not= nil entry)
        (do (set cond 1) (lua :break))
        (>= thing entry)
        (do (set cond 2) (lua :break))))
  (if (= cond 1)
      (values entry.node scope entry.kind)
      (= cond 2)
      (values thing.node scope thing.kind)
      (values node (get-root node) nil)))

;; (lua :return) version
(do
  (each [scope (iter-scope-tree node bufnr)]
    (let [entry (. defs (get-definition-id scope text))]
      (if (not= nil entry)
          (lua "return entry.node, scope, entry.kind")
          (>= thing entry)
          (lua "return thing.node, scope, thing.kind"))))
  (values node (get-root node) nil))

@end

@code lua

local cond = nil
local scope = nil
local entry = nil
for scope_2a in iter_scope_tree(node, bufnr) do
  scope = scope_2a
  entry = defs[get_definition_id(scope, text)]
  if (nil ~= entry) then
    cond = 1
    break
  elseif (thing >= entry) then
    cond = 2
    break
  else
  end
end
if (cond == 1) then
  return entry.node, scope, entry.kind
elseif (cond == 2) then
  return thing.node, scope, thing.kind
else
  return node, get_root(node), nil
end

-- using (lua :return) instead
for scope in iter_scope_tree(node, bufnr) do
  local entry = defs[get_definition_id(scope, text)]
  if (nil ~= entry) then
    return entry.node, scope, entry.kind
  elseif (thing >= entry) then
    return thing.node, scope, thing.kind
  end
end
return node, get_root(node), nil

@end

